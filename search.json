[
  {
    "objectID": "nbdev_tutorial.html#installation",
    "href": "nbdev_tutorial.html#installation",
    "title": "Beginner’s Tutorial",
    "section": "Installation ",
    "text": "Installation \n\nTo get started with nbdev, you need to install a few prerequisites. Follow these steps to install the required tools and libraries:\n\n\n\nInstall Python\nChoose a Python Package Manager\nInstall Jupyter Notebook\nLaunch Jupyter Notebook\n\n\n\nInstall Python \n\n\nInstall Python by visiting the official Python website: python.org.\n\n\n\n\nA Python package manager: We recommend conda or pip \n\n\nChoose a Python package manager based on your preferences and requirements.\n\n\n\n\nInstall Jupyter Notebook \n\n\nInstall Jupyter Notebook using the selected package manager:\n\n\n\n\n\nCode Cell (for conda):\n\n\n\nconda install -c conda-forge -y jupyterlab\n\n\n\nCode Cell (for pip):\n\n\n\npip install jupyterlab\n\n\nLaunch Jupyter Notebook \n\nLaunch Jupyter Notebook by running the following command in a terminal or command prompt:\n\njupyter lab\n\n\nInstallation and Setup of nbdev, Quarto\n\n\nInstall nbdev\nSet up nbdev\nInstall Quarto\nSet up Quarto with JupyterLab\n\n\n\n\nInstall nbdev \n\n\nTo begin, We start by installing nbdev, which is a Python library that provides a framework for developing libraries and documentation using Jupyter notebooks.\n\n\npip install nbdev\n\n\nSet up nbdev \n\n\nAfter installing nbdev, we need to set it up for our project. This involves creating the necessary folder structure and configuration files.\n\n\nnbdev_new\n\n\nAfter installing nbdev, we need to set it up for our project.\n\n\n\n\nThe nbdev_new command creates the necessary folder structure and configuration files for nbdev. It sets up the project with the required directories, such as docs, nbs, tests, and your_project_name.\n\n\n\n\nMake sure to replace your_project_name with the desired name for your nbdev project.\n\n\n\n\nInstall Quarto \n\n\nQuarto is a powerful publishing system for creating scientific and technical documents from Jupyter notebooks. Let’s install it now.\n\n\npip install quarto\n\n\nSet up Quarto with JupyterLab \n\n\nTo use Quarto with JupyterLab, we need to install the JupyterLab extension for Quarto.\n\n\n\n\n\nThis extension integrates Quarto into JupyterLab, allowing you to create and publish documents using Quarto’s features.\n\n\n\nquarto install --lab"
  },
  {
    "objectID": "nbdev_tutorial.html#create-an-empty-github-repo",
    "href": "nbdev_tutorial.html#create-an-empty-github-repo",
    "title": "Beginner’s Tutorial",
    "section": "Create an Empty GitHub Repo ",
    "text": "Create an Empty GitHub Repo \n\nBefore we start working on our nbdev project, we need to create an empty GitHub repository to hold our code and documentation. Follow these steps to create a new GitHub repository:\n\n\n\n\nOpen the GitHub web interface in your browser and log in to your account.\n\n\n\n\n\n\nClick on the + icon in the top-right corner and select New repository from the dropdown menu.\n\n\n\n\n\n\nEnter a name for your repository and an optional description.\n\n\n\n\n\n\nChoose whether you want the repository to be public or private.\n\n\n\n\n\n\nLeave the Initialize this repository with a README option unchecked.\n\n\n\n\n\n\nClick the Create repository button to create the empty repository.\n\n\n\n\n\n\nIf you still find it difficult, can refer github’s create new repo page.\n\n\n\n\n\n\nIf you’re using the web interface, it should look something like this (with your own repository name and descrpition) before you click “Create Repository”:"
  },
  {
    "objectID": "nbdev_tutorial.html#initialize-your-repo-with-nbdev",
    "href": "nbdev_tutorial.html#initialize-your-repo-with-nbdev",
    "title": "Beginner’s Tutorial",
    "section": "Initialize Your Repo with nbdev ",
    "text": "Initialize Your Repo with nbdev \n\nNow that we have created the GitHub repository, let’s initialize it with nbdev. Follow these steps to initialize your repository:\n\n\n\n\nOpen a terminal or command prompt on your local machine.\n\n\n\n\n\n\nNavigate to the directory where you want to clone the GitHub repository.\n\n\n\n\n\n\nRun the following command to clone the repository:\n\n\n\n# Run the following command to clone the repository:\ngit clone &lt;repository_url&gt;\n\nThis command creates a copy of the repository on your local machine. It will create a new directory with the same name as the repository and download all the files and commit history from the remote repository.\n\n# Change to the directory of your cloned repository:\ncd &lt;name-of-cloned-repo&gt;\n\nThis cell changes the working directory to the directory where you have cloned your repository. Replace  with the actual directory path.\n\n# Initialize your repository with nbdev using the following command:\nnbdev_new &lt;project_name&gt;\n\nThis cell initializes your repository with nbdev. Replace  with the desired name for your project. This command creates the necessary files and folder structure for your nbdev project.\n\n\n\nnbdev_new assumes that your package name is the same as your repo name (with - replaced by _). Use the –lib_name option if that isn’t the case.\n\n\n\n\nDouble-check your settings.ini file to ensure that it has all of the correct information.\n\n\n\n\n\nYou will be now redirected to your new repo.\n\n\n\n\nThen commit and push your additions to GitHub:\n\n\ngit add .\ngit commit -m'Initial Commit'\ngit push"
  },
  {
    "objectID": "nbdev_tutorial.html#enable-github-pages",
    "href": "nbdev_tutorial.html#enable-github-pages",
    "title": "Beginner’s Tutorial",
    "section": "Enable GitHub Pages ",
    "text": "Enable GitHub Pages \n\nTo enable GitHub Pages for your repository, follow these steps:\n\n\n\n\nGo to your repository’s Settings tab.\n\n\n\n\n\n\nScroll down to the Pages section.\n\n\n\n\n\n\nUnder Branch, select the gh-pages branch from the dropdown menu.\n\n\n\n\n\n\nClick the Save button.\n\n\n\n\n\n\nGitHub will build your pages and provide you with a URL where you can access your documentation.\n\n\n\n\n\n\nYou need to enable GitHub Pages for your repo by following the above steps."
  },
  {
    "objectID": "nbdev_tutorial.html#check-out-your-workflows",
    "href": "nbdev_tutorial.html#check-out-your-workflows",
    "title": "Beginner’s Tutorial",
    "section": "Check Out Your Workflows ",
    "text": "Check Out Your Workflows \n\nnbdev includes predefined workflows for continuous integration (CI) and deploying your documentation to GitHub Pages. The CI workflow runs tests and linters on your code whenever you push changes to your repository. The Deploy to GitHub Pages workflow builds and deploys your documentation to GitHub Pages.Let’s check out these workflows:\n\n\n\n\nOpen the Actions tab in your repository on GitHub.\n\n\n\n\n\n\nYou will see two workflows: CI and Deploy to GitHub Pages.\n\n\n\n\n\n\nYou need to check out your workflows by following the above steps."
  },
  {
    "objectID": "nbdev_tutorial.html#check-out-your-docs",
    "href": "nbdev_tutorial.html#check-out-your-docs",
    "title": "Beginner’s Tutorial",
    "section": "Check Out Your Docs ",
    "text": "Check Out Your Docs \n\nOnce the Deploy to GitHub Pages workflow has completed successfully, you can check out your documentation:\n\n\n\n\nWait for the pages build and deployment workflow to complete. You can monitor the progress in the Actions tab.\n\n\n\n\n\n\nOnce the workflow is finished, open your website using the provided URL. This is the URL where your documentation is hosted. You should see your documentation website with the initial content generated by nbdev.\n\n\n\n\n\n\nYou need to check out your docs by following the above steps.\n\n\n\n\n\nWait for the workflow run to complete, then open your website. By default it should be available at: https://{user}.github.io/{repo}"
  },
  {
    "objectID": "nbdev_tutorial.html#set-up-autoreload",
    "href": "nbdev_tutorial.html#set-up-autoreload",
    "title": "Beginner’s Tutorial",
    "section": "Set up Autoreload ",
    "text": "Set up Autoreload \n\nSince you’ll be often updating your modules from one notebook, and using them in another, it’s helpful if your notebook automatically reads in the new modules as soon as the Python file changes. To make this happen, just add these lines to the top of your notebook: \n\n%load_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "nbdev_tutorial.html#set-up-prerequisites",
    "href": "nbdev_tutorial.html#set-up-prerequisites",
    "title": "Beginner’s Tutorial",
    "section": "Set up Prerequisites ",
    "text": "Set up Prerequisites \n\nIf your module requires other modules as dependencies, you can add those prerequisites to your settings.ini in the requirements section. The requirements should be separated by a space and if the module requires at least or at most a specific version of the requirement this may be specified here, too.\n\n\n\n\nYou have to cross check whether the required packages along with their version is mentioned in the requirements of settings.ini file."
  },
  {
    "objectID": "nbdev_tutorial.html#make-your-first-edit",
    "href": "nbdev_tutorial.html#make-your-first-edit",
    "title": "Beginner’s Tutorial",
    "section": "Make Your First Edit ",
    "text": "Make Your First Edit \n\nNow, let’s make our first edit to the documentation and see how it updates.\n\n\n\n\nInstall nbdev’s hooks by running the following command in your terminal or command prompt:\n\n\n\n# Run the following command to install nbdev's hooks:\nnbdev_install_hooks\n\nThe nbdev_install_hooks command is used to install nbdev’s Git hooks in your local repository. Git hooks are scripts that are automatically executed at specific points during the Git workflow.\n\n\n\nBy installing nbdev’s Git hooks, you can automate certain checks and validations before committing or pushing changes to your repository. The pre-commit hook ensures that checks like linting, code formatting, and notebook validation are performed before a commit is made. This helps maintain code quality and ensures that your project adheres to certain standards.\n\n\nnbdev_build_lib\n\nThis code cell builds the Python library from the Jupyter notebooks in your project. It converts the notebooks into Python modules and places them in the appropriate directory. It also generates an init.py file that allows you to import your library’s functions as modules.\n\n# Use the nbdev_export command to create Python modules for your notebooks:\nnbdev_export\n\nThis code cell runs the nbdev_export command, which creates Python modules for your notebooks. This command converts your notebook code cells into Python modules that can be imported and used by other users of your library.\n\n# Install your package using pip:\npip install -e '.[dev]'\n\nThis code cell installs your package using the pip install -e command. The -e flag allows you to install the package in editable mode, which means any changes you make to the code will be immediately reflected without needing to reinstall.\n\nnbdev_build_docs\n\nThe nbdev_build_docs helps you ensure that your documentation is up to date with the latest changes in your notebooks. It allows you to review the documentation, make any necessary adjustments, and provide a good resource for users to refer to when working with your library or package.\n\n# Start the preview of your docs using nbdev:\nnbdev_preview\n\nThis code cell starts the preview of your documentation using the nbdev_preview command. This command launches a local web server that allows you to preview your documentation in a web browser."
  },
  {
    "objectID": "nbdev_tutorial.html#edit-00_core.ipynb",
    "href": "nbdev_tutorial.html#edit-00_core.ipynb",
    "title": "Beginner’s Tutorial",
    "section": "Edit 00_core.ipynb ",
    "text": "Edit 00_core.ipynb \n\nLet’s now make an edit to the 00_core.ipynb notebook, which is the main notebook of our library.\n\n\n\n\nOpen the 00_core.ipynb file in Jupyter Notebook.\n\n\n\n\n\n\nUpdate the notebook metadata and default export module according to your library’s needs.\n\n\n\n\n\n\nSave the notebook and rerun all cells to export the modules. Your changes will be reflected in the generated Python modules and documentation.\n\n\n\n\nThe file name “00_core.ipynb” is the default notebook name used in the tutorial. However, you can rename the file to suit your needs. If you decide to rename the file, make sure to update the references to it in the tutorial accordingly.\n\n\nAlso it’s not necessary to follow the same naming pattern starting with 00 then 01 for other notebook names."
  },
  {
    "objectID": "nbdev_tutorial.html#add-your-own-function",
    "href": "nbdev_tutorial.html#add-your-own-function",
    "title": "Beginner’s Tutorial",
    "section": "Add Your Own Function ",
    "text": "Add Your Own Function \n\nLet’s add a new function to our library. Follow these steps:\n\n\n\n\nAdd a new code cell in the 00_core.ipynb notebook.\n\n\n\n\n\n\nDefine your function in the code cell.\n\n\n\n\n\n\nUse the #| export directive to specify that this function should be exported.\n\n\n\n\n\n\nSave the notebook and rerun all cells to update the modules. Your new function will be available in the generated Python modules and can be imported and used by other users of your library."
  },
  {
    "objectID": "nbdev_tutorial.html#add-examples-tests-and-docs",
    "href": "nbdev_tutorial.html#add-examples-tests-and-docs",
    "title": "Beginner’s Tutorial",
    "section": "Add Examples, Tests, and Docs ",
    "text": "Add Examples, Tests, and Docs \n\nIt’s important to provide examples, tests, and documentation for your library. Follow these steps:\n\n\n\n\nAdd regular code cells below your function’s code cell to provide examples of how to use the function.\n\n\n\n\n\n\nAdd test cells using assertions or the fastcore.test functions to test your function’s behavior.\n\n\n\n\n\n\nInclude plots, images, or widgets in your examples if desired.\n\n\n\n\n\n\nSave the notebook and rerun all cells to update the modules and documentation. Your examples, tests, and documentation will be included in the generated Python modules and documentation.\n\n\n\n\ndef calculate_total_cost(item_price: float, # The price of a single item.\n                         quantity: int, # The quantity of items.  \n                         discount: float = 0, # The discount rate as a decimal value. Defaults to 0.\n                         tax_rate: float = 0, # The tax rate as a decimal value. Defaults to 0.\n                        ) -&gt; float: # The total cost of the items, including any applicable discount and tax.\n    \"\"\"\n    Calculate the total cost of an item or items, taking into account the quantity, discount, and tax rate.\n\n    Raises:\n        ValueError: If item_price or quantity is negative.\n\n    \"\"\"\n    if item_price &lt; 0 or quantity &lt; 0:\n        raise ValueError(\"Item price and quantity must be non-negative.\")\n\n    subtotal = item_price * quantity\n    total_discount = subtotal * discount\n    total_tax = subtotal * tax_rate\n\n    total_cost = subtotal - total_discount + total_tax\n    return total_cost\n\n\n\ncalculate_total_cost\n\n calculate_total_cost (item_price:float, quantity:int, discount:float=0,\n                       tax_rate:float=0)\n\nCalculate the total cost of an item or items, taking into account the quantity, discount, and tax rate.\nRaises: ValueError: If item_price or quantity is negative.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nitem_price\nfloat\n\nThe price of a single item.\n\n\nquantity\nint\n\nThe quantity of items.\n\n\ndiscount\nfloat\n0\nThe discount rate as a decimal value. Defaults to 0.\n\n\ntax_rate\nfloat\n0\nThe tax rate as a decimal value. Defaults to 0.\n\n\nReturns\nfloat\n\nThe total cost of the items, including any applicable discount and tax.\n\n\n\n\n# Example usage\nitem_price = 10.99\nquantity = 5\ndiscount = 0.1\ntax_rate = 0.08\n\ntotal_cost = calculate_total_cost(item_price, quantity, discount, tax_rate)\ntotal_cost\n\n53.851"
  },
  {
    "objectID": "nbdev_tutorial.html#prepare-your-changes",
    "href": "nbdev_tutorial.html#prepare-your-changes",
    "title": "Beginner’s Tutorial",
    "section": "Prepare Your Changes ",
    "text": "Prepare Your Changes \n\nBefore committing your changes, it’s a good practice to run the nbdev_prepare command in the terminal or command prompt. This command performs several tasks to prepare your repository:\n\n\n\n\nBuilds the .py modules from the notebooks.\n\n\n\n\n\n\nRuns tests on the notebooks.\n\n\n\n\n\n\nCleans the notebooks.\n\n\n\n\n\n\nUpdates the README.md file with the contents of the index.ipynb notebook.\n\n\n\n\n\nRun the following command to prepare your changes:\n\n\n# Run the following command to prepare your changes:\nnbdev_prepare\n\nThis code cell runs the nbdev_prepare command in the terminal or command prompt. This command performs several actions, including building the .py modules, testing the notebooks, cleaning the notebooks, and updating the README.md file.\n\n\n\nThe nbdev_prepare command performs a series of tasks to prepare your nbdev project for a commit. It ensures that your project is in a clean and organized state before you push your changes to the remote repository. The nbdev_prepare command includes the following commands:\n\n\n\n\n\nnbdev_build_lib: This command converts the Jupyter notebooks in your project into Python modules. It creates .py files for each notebook and places them in the appropriate project directories. This step is crucial for making your code accessible as importable modules.\n\n\n\n\n\n\nnbdev_clean_nbs: This command removes unnecessary metadata from your Jupyter notebooks. It cleans up the notebooks by removing execution counts, cell outputs, and other metadata that is not relevant for code distribution or documentation. This step helps keep your notebooks clean and focused on the code and documentation content.\n\n\n\n\n\n\nnbdev_diff_nbs: This command compares the notebook code cells with the corresponding Python modules to detect any inconsistencies. It identifies any code changes in the notebooks that have not been reflected in the Python modules. This step helps ensure that your code is synchronized between the notebooks and the modules.\n\n\n\n\n\n\nnbdev_fix_merge: This command helps resolve merge conflicts that may arise when working with notebooks and modules in a collaborative environment. It applies the necessary fixes to merge conflicts, allowing you to reconcile changes from different branches or contributors.\n\n\n\n\n\n\nnbdev_install_git_hooks: This command installs Git hooks in your project repository. Git hooks are scripts that are executed at specific points in the Git workflow, such as before committing or before pushing. These hooks can perform actions like running tests, linting code, or checking for code formatting. Installing Git hooks helps automate these checks and ensures that code quality standards are maintained.\n\n\n\n\n\nBy running the nbdev_prepare command, you ensure that your project is properly built, cleaned, and synchronized, and that it adheres to the necessary Git workflow and quality checks. It sets your project up for a successful commit and push to the remote repository.\n\n\n# Commit your changes using Git:\ngit add .\ngit commit -m \"Add my new function and examples\"\n# Push your changes to GitHub:\ngit push origin main\n\nThis code cell performs the Git commands to commit and push your changes to the remote repository. It adds all the modified files (git add .), commits the changes with a message (git commit -m “Update documentation”), and pushes the changes to the main branch of the remote repository (git push origin main).\n\n\n\nAfter pushing your changes, three actions will be performed: deployment, CI, and GitHub Pages.\n\n\n\n\nIf all three actions are successful, your commit is successful, and you can view your deployment at the provided URL.\n\n\n\n\nCommon errors that could be encountered include the “No module found” error, which happens when a developer forgets to add dependencies in the settings.ini file. Make sure to double-check and update the settings.ini file with the required dependencies for your project. It’s highlighted in the settings.ini image above.\n\n\n#| hide\nimport nbdev; nbdev.nbdev_export()\n\n\n#| hide is a directive (like #| default_exp) which excludes a cell from both your exported module and docs\n\n\n\n\nnbdev_export is the command used to export your notebooks to Python modules."
  },
  {
    "objectID": "nbdev_tutorial.html#common-errors-and-their-solutions",
    "href": "nbdev_tutorial.html#common-errors-and-their-solutions",
    "title": "Beginner’s Tutorial",
    "section": "Common Errors and their Solutions ",
    "text": "Common Errors and their Solutions \n\nHere are a few common errors that you may encounter while working on documentation using nbdev, along with their solutions:\n\n\n\nImport Errors: This error occurs when you try to import a module or function that is not properly defined or not present in the generated Python modules. It can happen if you forget to add the #| export directive to the code cell containing the function or if there is a typo in the import statement.\n\n\n\n\n\nSolution: Double-check that the code cell defining the function has the #| export directive. Also, verify that the import statement in the notebook or in other modules is correctly referencing the function from the generated Python modules.\n\n\n\n\n\nBuild Failures: Sometimes, during the nbdev_build_lib step, you may encounter build failures due to syntax errors, unresolved dependencies, or incompatible code.\n\n\n\n\n\nSolution: Review the error message to identify the cause of the build failure. Check for syntax errors in your code, ensure that all required dependencies are specified in the settings.ini file, and resolve any compatibility issues. Once you fix the errors, run nbdev_build_lib again.\n\n\n\n\n\nDocumentation Formatting Issues: If you encounter issues with the formatting of your generated documentation, such as incorrect rendering of Markdown cells, missing sections, or broken links, it could be due to incorrect formatting or missing metadata in the notebooks.\n\n\n\n\n\nSolution: Review your notebooks and ensure that the Markdown cells are properly formatted with appropriate headings, bullet points, and links. Verify that the notebook metadata, such as toc, title, and keywords, are correctly specified. Rerun the necessary cells or notebooks to regenerate the documentation with the correct formatting.\n\n\n\n\n\nFailure in Tests: If your tests fail during the nbdev_test_nbs step, it means that the code in your notebooks is not producing the expected output or behavior.\n\n\n\n\n\nSolution: Review the failed tests and the associated error messages to identify the cause of the failure. Check your code for logical errors, incorrect calculations, or missing assertions. Modify your code or test cases accordingly until the tests pass successfully.\n\n\n\n\n\nGitHub Action Workflow Errors: While working with GitHub Actions, you may encounter errors related to workflow setup, configuration, or dependency management.\n\n\n\n\n\nSolution: Review the workflow files (usually located in the .github/workflows directory) and ensure that the configurations are correct. Check for any typos, missing dependencies, or incorrect setup steps. Additionally, refer to the GitHub Actions documentation for troubleshooting guidance specific to your issue.\n\n\n\n\nRemember that thorough testing, careful code review, and attention to detail can help you avoid many common errors. If you encounter any issues, don’t hesitate to refer to the nbdev documentation."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to nbdev",
    "section": "",
    "text": "Notebook-Driven Development: Write your code and documentation in Jupyter notebooks, enabling an interactive and iterative development process.\n\n\n\n\nAutomated Documentation: Generate high-quality documentation automatically from your notebooks using tools like Quarto and GitHub Pages.\n\n\n\n\nTesting and Continuous Integration: Write tests directly in your notebooks, and run them automatically to ensure your code is working correctly. nbdev integrates seamlessly with GitHub Actions for continuous integration.\n\n\n\n\nPackage Building: Build your library into a distributable Python package with a single command, making it easy to share and distribute your code.\n\n\n\n\nGit Integration: nbdev provides Git hooks that clean unwanted metadata and render merge conflicts in a human-readable format, making version control and collaboration easier."
  },
  {
    "objectID": "index.html#features-of-nbdev",
    "href": "index.html#features-of-nbdev",
    "title": "Introduction to nbdev",
    "section": "",
    "text": "Notebook-Driven Development: Write your code and documentation in Jupyter notebooks, enabling an interactive and iterative development process.\n\n\n\n\nAutomated Documentation: Generate high-quality documentation automatically from your notebooks using tools like Quarto and GitHub Pages.\n\n\n\n\nTesting and Continuous Integration: Write tests directly in your notebooks, and run them automatically to ensure your code is working correctly. nbdev integrates seamlessly with GitHub Actions for continuous integration.\n\n\n\n\nPackage Building: Build your library into a distributable Python package with a single command, making it easy to share and distribute your code.\n\n\n\n\nGit Integration: nbdev provides Git hooks that clean unwanted metadata and render merge conflicts in a human-readable format, making version control and collaboration easier."
  },
  {
    "objectID": "index.html#overview-of-the-tutorial",
    "href": "index.html#overview-of-the-tutorial",
    "title": "Introduction to nbdev",
    "section": "Overview of the Tutorial",
    "text": "Overview of the Tutorial\n\nVideo Tutorial for nbdev Documentation\n\n\n\nA video tutorial providing additional guidance on using nbdev for documentation purposes.\n\n\n\nInstallation\n\n\n\nWe’ll start by installing the necessary tools and dependencies, including Python, a Python package manager (conda or pip), Jupyter Notebook, nbdev, Quarto, and the Quarto JupyterLab extension.\n\n\n\nCreate an Empty GitHub Repo\n\n\n\nCreate a new repository on GitHub to host our nbdev project and initialize it using nbdev commands.\n\n\n\nInitialize Your Repo with nbdev\n\n\n\nCreate a new repository on GitHub and initialize it using nbdev commands.\n\n\n\nEnable GitHub Pages\n\n\n\nConfigure GitHub Pages for our repository to publish our documentation.\n\n\n\nCheck Out Your Workflows\n\n\n\nExplore the CI and Deploy to GitHub Pages workflows in the Actions tab of our repository.\n\n\n\nCheck Out Your Docs\n\n\n\nWe’ll wait for the pages build and deployment workflow to complete, and then access our documentation by opening the provided URL.\n\n\n\nSet up Autoreload\n\n\n\nConfigure your Jupyter environment to enable autoreloading of modules.\n\n\n\nSet up Prerequisites\n\n\n\nInstall the necessary dependencies, including Python, Python package manager (pip or conda), Jupyter Notebook, nbdev, Quarto, and the Quarto JupyterLab extension.\n\n\n\nMake Your First Edit\n\n\n\nClone your GitHub repository, initialize it with nbdev, and enable GitHub Pages for documentation.\n\n\n\nEdit 00_core.ipynb\n\n\n\nOpen the 00_core.ipynb file, update notebook metadata and default export module, and save the notebook to export the modules.\n\n\n\nAdd Your Own Function\n\n\n\nCreate a new code cell in the notebook, define your own function, and use the #| export directive to include it in the module.\n\n\n\nAdd Examples, Tests, and Docs\n\n\n\nAdd regular code cells to provide examples, write test cells using asserts or fastcore.test functions, and include documentation using Markdown cells.\n\n\n\nPrepare Your Changes\n\n\n\nRun nbdev commands in the terminal to build modules, test notebooks, clean notebooks, and update the README.md file.\n\n\n\nCommon Errors and their Solutions\n\n\n\nLearn about common errors, such as “No module found” errors due to missing dependencies, and how to resolve them."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "Introduction to nbdev",
    "section": "Install",
    "text": "Install\n\nTo get started with nbdev, you need to install it in your Python environment. You can install nbdev using either pip or conda:\n\npip install nbdev\nconda install -c fastai nbdev\n\nMake sure to install nbdev in the same Python environment that you use for Jupyter notebooks and your project."
  },
  {
    "objectID": "index.html#how-to-use-nbdev",
    "href": "index.html#how-to-use-nbdev",
    "title": "Introduction to nbdev",
    "section": "How to Use nbdev",
    "text": "How to Use nbdev\n\nThe best way to learn how to use nbdev is to work through the provided tutorial. The tutorial will walk you through the entire process of creating a Python library using nbdev, including defining functions, writing tests, generating documentation, and building the package. You can follow the tutorial either in written walkthrough form or through the accompanying video.\n\n\n\n\nYou can also run nbdev_help from the terminal to see the full list of available commands:\n\n\n!nbdev_help\n\nnbdev_bump_version        Increment version in settings.ini by one\nnbdev_changelog           Create a CHANGELOG.md file from closed and labeled GitHub issues\nnbdev_clean               Clean all notebooks in `fname` to avoid merge conflicts\nnbdev_conda               Create a `meta.yaml` file ready to be built into a package, and optionally build and upload it\nnbdev_create_config       Create a config file.\nnbdev_docs                Create Quarto docs and README.md\nnbdev_export              Export notebooks in `path` to Python modules\nnbdev_filter              A notebook filter for Quarto\nnbdev_fix                 Create working notebook from conflicted notebook `nbname`\nnbdev_help                Show help for all console scripts\nnbdev_install             Install Quarto and the current library\nnbdev_install_hooks       Install Jupyter and git hooks to automatically clean, trust, and fix merge conflicts in notebooks\nnbdev_install_quarto      Install latest Quarto on macOS or Linux, prints instructions for Windows\nnbdev_merge               Git merge driver for notebooks\nnbdev_migrate             Convert all markdown and notebook files in `path` from v1 to v2\nnbdev_new                 Create an nbdev project.\nnbdev_prepare             Export, test, and clean notebooks, and render README if needed\nnbdev_preview             Preview docs locally\nnbdev_proc_nbs            Process notebooks in `path` for docs rendering\nnbdev_pypi                Create and upload Python package to PyPI\nnbdev_readme              None\nnbdev_release_both        Release both conda and PyPI packages\nnbdev_release_gh          Calls `nbdev_changelog`, lets you edit the result, then pushes to git and calls `nbdev_release_git`\nnbdev_release_git         Tag and create a release in GitHub for the current version\nnbdev_sidebar             Create sidebar.yml\nnbdev_test                Test in parallel notebooks matching `path`, passing along `flags`\nnbdev_trust               Trust notebooks matching `fname`\nnbdev_update              Propagate change in modules matching `fname` to notebooks that created them\n\n\n\nBy the end of the tutorial, you will have a solid understanding of nbdev and be able to leverage its powerful features to develop and maintain your own Python libraries."
  }
]